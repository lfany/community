From e0527fb7f10721870014d7c08b1a2f8f5bf2edcf Mon Sep 17 00:00:00 2001
From: Oleg Grenrus <oleg.grenrus@iki.fi>
Date: Mon, 22 Aug 2016 17:51:42 +0300
Subject: [PATCH] Support http-client-0.5

---
 purescript.cabal                       |  2 +-
 src/Language/PureScript/Ide/Pursuit.hs | 44 ++++++++++++++++------------------
 stack.yaml                             |  5 +++-
 3 files changed, 25 insertions(+), 26 deletions(-)

diff --git a/purescript.cabal b/purescript.cabal
index 71fee5d..505e441 100644
--- a/purescript.cabal
+++ b/purescript.cabal
@@ -117,7 +117,7 @@ library
                    fsnotify >= 0.2.1,
                    Glob >= 0.7 && < 0.8,
                    haskeline >= 0.7.0.0,
-                   http-client >= 0.4.30 && <0.5,
+                   http-client >= 0.4.30 && <0.6,
                    http-types -any,
                    language-javascript == 0.6.*,
                    lifted-base >= 0.2.3 && < 0.2.4,
diff --git a/src/Language/PureScript/Ide/Pursuit.hs b/src/Language/PureScript/Ide/Pursuit.hs
index 962f573..ae40238 100644
--- a/src/Language/PureScript/Ide/Pursuit.hs
+++ b/src/Language/PureScript/Ide/Pursuit.hs
@@ -35,41 +35,37 @@ import qualified Pipes.Prelude                 as P
 -- TODO: remove this when the issue is fixed at Pursuit
 queryPursuit :: Text -> IO ByteString
 queryPursuit q = do
-  let qClean = T.dropWhileEnd (== '.') q
-  req' <- parseRequest "http://pursuit.purescript.org/search"
-  let req = req'
-        { queryString= "q=" <> (fromString . T.unpack) qClean
-        , requestHeaders=[(hAccept, "application/json")]
-        }
-  m <- newManager tlsManagerSettings
-  withHTTP req m $ \resp ->
-    P.fold (<>) "" identity (responseBody resp)
-
+    let qClean = T.dropWhileEnd (== '.') q
+    req' <- parseRequest "http://pursuit.purescript.org/search"
+    let req = req'
+          { queryString= "q=" <> (fromString . T.unpack) qClean
+          , requestHeaders=[(hAccept, "application/json")]
+          }
+    m <- newManager tlsManagerSettings
+    withHTTP req m $ \resp ->
+      P.fold (<>) "" identity (responseBody resp)
 
 handler :: HttpException -> IO [a]
-handler StatusCodeException{} = pure []
 handler _ = pure []
 
 searchPursuitForDeclarations :: Text -> IO [PursuitResponse]
-searchPursuitForDeclarations query =
-    (do r <- queryPursuit query
-        let results' = decode (fromStrict r) :: Maybe Array
-        case results' of
-          Nothing -> pure []
-          Just results -> pure (mapMaybe (isDeclarationResponse . fromJSON) (toList results))) `E.catch`
-    handler
+searchPursuitForDeclarations query = E.handle handler $ do
+    r <- queryPursuit query
+    let results' = decode (fromStrict r) :: Maybe Array
+    case results' of
+        Nothing -> pure []
+        Just results -> pure (mapMaybe (isDeclarationResponse . fromJSON) (toList results))
   where
     isDeclarationResponse (Success a@DeclarationResponse{}) = Just a
     isDeclarationResponse _ = Nothing
 
 findPackagesForModuleIdent :: Text -> IO [PursuitResponse]
-findPackagesForModuleIdent query =
-  (do r <- queryPursuit query
-      let results' = decode (fromStrict r) :: Maybe Array
-      case results' of
+findPackagesForModuleIdent query = E.handle handler $ do
+    r <- queryPursuit query
+    let results' = decode (fromStrict r) :: Maybe Array
+    case results' of
         Nothing -> pure []
-        Just results -> pure (mapMaybe (isModuleResponse . fromJSON) (toList results))) `E.catch`
-  handler
+        Just results -> pure (mapMaybe (isModuleResponse . fromJSON) (toList results))
   where
     isModuleResponse (Success a@ModuleResponse{}) = Just a
     isModuleResponse _ = Nothing
